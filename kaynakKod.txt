<?php

namespace App\Http\Controllers;

use App\Models\Category;
use App\Models\Product;
use App\Models\ProductDetail;

class HomeController extends Controller
{
    public function index(){
        $categories = Category::whereRaw('parent_id is null')->take(8)->get();

        $slider_products=Product::select('product.*')
            ->join('product_details','product_details.product_id','product.id')
            ->where('product_details.show_slider',1)
            ->take(3)->get();

        $product_of_the_day = Product::select('product.*')
            ->join('product_details','product_details.product_id','product.id')
            ->where('product_details.show_product_of_the_day',1)
            ->orderBy('updated_at','asc')
            ->first();

        $featured_products=Product::select('product.*')
            ->join('product_details','product_details.product_id','product.id')
            ->where('product_details.show_featured',1)
            ->take(12)->get();

        $best_seller_products=Product::select('product.*')
            ->join('product_details','product_details.product_id','product.id')
            ->where('product_details.show_best_seller',1)
            ->orderBy('id','desc')
            ->take(8)->get();

        $discounted_products=Product::select('product.*')
            ->join('product_details','product_details.product_id','product.id')
            ->where('product_details.show_discounted',1)
            ->orderBy('updated_at','desc')
            ->take(4)->get();


        return view('home',compact('categories','slider_products','product_of_the_day',
        'featured_products','best_seller_products','discounted_products'));
    }
}



namespace App\Http\Controllers;

use App\Models\Category;
use App\Models\Product;
use Illuminate\Http\Request;

class CategoryController extends Controller
{
    public function index($slug_category_name){
        $category = Category::where('slug',$slug_category_name)->firstOrFail();
        $sub_categories = Category::where('parent_id',$category->id)->get();

        $order = request('order');
        if ($order=='bestsellers'){
            $products = $category->products()
                ->distinct()
                ->join('product_details','product_details.product_id','product.id')
                ->orderByDesc('product_details.show_best_seller')
                ->paginate(2);
        }else if ($order=='new'){
             $products=$category->products()
                ->distinct()
                ->orderByDesc('updated_at')->paginate(4);
        }else{
            $products = $category->products()->paginate(4);

        }

        return view('category' , compact('category','sub_categories','products'));
    }
}


<?php

namespace App\Http\Controllers;

use App\Mail\UserRegisterMail;
use App\Models\User;
use App\Models\UserDetail;
use App\Models\Basket;
use App\Models\BasketProduct;
use Cart;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Str;

class UserController extends Controller
{
     public function __construct(){
         $this->middleware('guest')->except('logout');
     }
     public function input_form(){
         return view('user.login');
     }
     public function input(){
         $this->validate(request(),[
            'email'=> 'required|email',
            'password'=> 'required'
         ]);
         $credentials = [
             'email'=>request('email'),
             'password'=>request('password')
          /* 'active_mi' =>1*/
         ];

         if (auth()->attempt($credentials,request()->has('remember me'))){
             request()->session()->regenerate();

/* $active_cart_id = Cart::firstOrCreate(['user_id' => auth()->id()])->id;*/

             $active_cart_id = Cart::active_cart_id();
             if (!is_null($active_cart_id)){
                 $active_cart = Cart::create(['user_id'=>auth()->id()]);
                 $active_cart_id = $active_cart->id;
             }

             session()->put('active_basket_id',$active_cart_id);

             if (Cart::count()>0){
                 foreach(Cart::content() as $cartItem)
                 {
                     CartItem::updateOrCreate(
                         ['cart_id'=>$active_cart_id, 'product_id'=>$cartItem->id],
                         ['qty'=>$cartItem->qty, 'price'=>$cartItem->price, 'status'=>'Pending']
                     );
                 }
             }

             Cart::destroy();
             $sepetItems = CartItem::where('basket_id',$active_sepet_id)->get();
             foreach ($sepetUrunler as $sepetUrun)
             {
                 Cart::add($cartItem->product->id,$cartItem->product->product_name,$cartItem->unit, $cartItem->price,
                 ['slug'=>$cartProduct->product->slug]);
             }

             return redirect()->intended('/');
         }else{
             $errors = ['email'=>'Incorrect login.'];
             return back()->withErrors($errors);
         }
     }
     public function sign up_form(){
         return view('user.sign up');
     }
     public function register(){
         $this->validate(request(), [
             'name'=>'required|min:5|max:60',
             'email'=>'required|email|unique:user',
             'password' => 'required|confirmed|min:5|max:15'
         ]);

     $user = User::create([
         'name' => request('namename'),
         'email' => request('email'),
         'password' => Hash::make(request('password')),
         'activation_key' => Str::random(60),
         'is_active' =>0
     ]);

     $user->detail()->save(new UserDetail());

     Mail::to(request('email'))->send(newUserRegisterMail($user));

     auth()->login($user);

     return redirect()->route('homepage');
     }
     public function enable($key){
         $user = User::where('activation_key',$key)->first();
         if (!is_null($user)){
             $user->activation_key=null;
             $user->active_mi=1;
             $user->save();
             return redirect()->to('/')
                 ->with('message','Your registration has been activated.')
                 ->with('message_eng','success');
         }
         else{
             return redirect()->to('/')
                 ->with('message','Your registration could not be activated.')
                 ->with('message_eng','warning');
         }
     }
     public function log out(){
         auth()->logout();
         request()->session()->flush();
         request()->session()->regenerate();
         return redirect()->route('homepage');
     }

}
<?php

namespace App\Http\Controllers;

use App\Models\Order;
use Cart;
use Illuminate\Http\Request;

class OdemeController extends Controller
{
     public function index(){

         if (!auth()->check())
         {
             return redirect()->route('user.login')
                 ->with('message_eng','info')
                 ->with('message','You must login or register as a user for payment.');
         }
         else if (count(Cart::content())==0)
         {
             return redirect()->route('homepage')
                 ->with('message_eng','info')
                 ->with('message','You must add product to cart for checkout.');
         }

         $user_detail = auth()->user()->detail;


         return view('payment',compact('user_detail'));
     }

     public function checkout()
     {
         $order = request()->all();
         $order['basket_id'] =session('active_cart_id');
         $order['bank'] = "Guarantee";
         $order['number_instalments'] = 1;
         $order['status'] = "Your order has been received";
         $order['order_amount'] = Cart::subtotal()

<?php

namespace App\Http\Controllers;

use App\Models\Order;
use Illuminate\Http\Request;

class OrderController extends Controller
{
     public function index(){
         $orders = Order::with('basket')
             ->whereHas('basket',function ($query){
                 $query->where('user_id',auth()->id());
             })
             ->orderByDesc('create_date')->get();
         return view('orders',compact('orders'));
     }

     public function detail($id){
         $order = Order::with('sepet.sepet_products')
             ->whereHas('basket',function ($query){
                 $query->where('user_id',auth()->id());
             })
             ->where('order.id',$id)->firstOrFail();
         return view('order',compact('order'));
     }
}

<?php

namespace App\Http\Controllers\Management;

use App\Models\Category;
use App\Models\Order;
use App\Models\Product;

use App\Models\ProductDetail;
use App\Http\Controllers\Controller;

class OrderController extends Controller
{
     public function index()
     {
         if (request()->filled('searched')) {
             request()->flash();
             $searched = request('searched');
             $list = Order::with('cart.user')->where('name', 'like', "%$searched%")
                 ->orWhere('id', $searched)
                 ->orderByDesc('id')
                 ->paginate(8)
                 ->appends('searched', $searched);
         } else {
             $list = Order::with('cart.user')->orderByDesc('id')->paginate(8);
         }

         return view('management.order.index', compact('list'));
     }

     public function form($id = 0)
     {
         if ($id > 0) {
             $entry = Order::with('sepet.sepet_urunler.urun')->find($id);
         }
         return view('management.order.form',compact('entry'));
     }

     public function save($id = 0)
     {
         $this->validate(request(), [
             'name' => 'required',
             'address' => 'required',
             'phone' => 'required',
             'status' => 'required'
         ]);

         $data = request()->only('name', 'address', 'phone', 'cellphone', 'state');

         if ($id > 0) {
             $entry = Order::where('id', $id)->firstOrFail();
             $entry->update($data);
         }

         return redirect()
             ->route('management.order.order', $entry->id)
             ->with('message', 'Updated')
             ->with('message_eng', 'success');
     }

     public function delete($id)
     {
         Order::destroy($id);

         return redirect()
             ->route('management.order')
             ->with('message', 'Record deleted')
             ->with('message_eng', 'success');
     }
}


<?php

namespace App\Http\Controllers\Management;

use App\Models\Category;
use App\Models\User;
use App\Models\UserDetail;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

class CategoryController extends Controller
{
     public function index()
     {
         if (request()->filled('searched')) {
             request()->flash();
             $searched = request('searched');
             $list = Category::with('ust_category')->where('category_name', 'like', "%$searched%")
                 ->orderByDesc('id')
                 ->paginate(8)
                 ->appends('searched', $searched);
         } else {
             $list = Category::with('ust_category')->orderByDesc('id')->paginate(8);
         }

         return view('management.category.index', compact('list'));
     }

     public function form($id = 0)
     {
         $entry = new Category;
         if ($id>0)
         {
             $entry = Category::find($id);
         }
         $categories = Category::all();
         return view('management.category.form',compact('entry','categories'));
     }

     public function save($id = 0)
     {
         $data = request()->only('category_name', 'slug', 'ust_id');
         if (!request()->filled('slug')) {
             $data['slug'] = str_slug(request('category_name'));
             request()->merge(['slug' => $data['slug']]);
         }

         $this->validate(request(), [
             'category_name' => 'required',
             'slug' => (request('original_slug') != request('slug') ? 'unique:category,slug' : '')
         ]);

         if ($id>0)
         {
             $entry= Category::where('id',$id)->firstOrFail();
             $entry->update($data);
         }else
         {
             $entry = Category::create($data);
         }

         return redirect()
             ->route('manage.category.edit', $entry->id)
             ->with('message',($id>0 ? 'Updated' : 'Saved'))
             ->with('message_eng','success');
     }

     public function delete($id)
     {
         $category = Category::find($id);
         $category_item_unit = $category->products()->count();
         if ($category_item_unit>0)
         {
             return redirect()
                 ->route('management.category')
                 ->with('message', "There are $category_items_items in this category. Therefore, no deletion was made.")
                 ->with('message_eng', 'warning');
         }
         $category->products()->detach();
         $category->delete();

         return redirect()
             ->route('management.category')
             ->with('message', 'Record deleted')
             ->with('message_eng', 'success');
     }
}

<?php

namespace App\Http\Controllers\Management;

use App\Models\Category;
use App\Models\User;
use App\Models\Product;

use App\Models\ProductDetail;
use Illuminate\Http\File;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

class ProductController extends Controller
{
     public function index()
     {
         if (request()->filled('searched')) {
             request()->flash();
             $searched = request('searched');
             $list = Item::where('product_name', 'like', "%$search%")
                 ->orWhere('description', 'like', "%$searched%")
                 ->orderByDesc('id')
                 ->paginate(8)
                 ->appends('searched', $searched);
         } else {
             $list = Item::orderByDesc('id')->paginate(8);
         }

         return view('management.product.index', compact('list'));
     }

     public function form($id = 0)
     {
         $entry = new Item;
         $product_categories = [];
         if ($id > 0) {
             $entry = Item::find($id);
             $item_categories = $entry->categories()->pluck('category_id')->all();
         }
         $categories = Category::all();
         return view('management.product.form',compact('entry','categories','product_categories'));
     }

     public function save($id = 0)
     {
         $data = request()->only('product_name', 'slug', 'description','price');
         if (!request()->filled('slug')) {
             $data['slug'] = str_slug(request('product_name'));
             request()->merge(['slug' => $data['slug']]);
         }

         $this->validate(request(), [
             'product_name' => 'required',
             'price' => 'required',
             'slug' => (request('original_slug') != request('slug') ? 'unique:product,slug' : '')
         ]);

         $data_detail = request()->only('show_slider',
             'show_gunun_firsati','show_one_cikan','show_cok_satan','show_discount');

         $categories = request('categories');


         if ($id>0)
         {
             $entry= Product::where('id',$id)->firstOrFail();
             $entry->update($data);
             $entry->detail()->update($data_detail);
             $entry->categories()->sync($categories);
         }else
         {
             $entry = Product::create($data);
             $entry->detail()->create($data_detail);
             $entry->categories()->attach($categories);
         }

         if (request()->hasFile('product_image')){
             $this->validate(request(),[
                'product_image' => 'image|mimes:jpg,png,jpeg,gif|max:2048'
             ]);

             $product_image = request()->file('product_image');
             $product_image = request()->product_image;

             $filename = $entry->id . "_" . time() . "." . $product_image->extension();


             if ($product_image->isValid()){
                 $product_image->move('uploads/products',$filename);

                 ProductDetail::updateOrCreate(
                     ['product_id'=>$entry->id],
                     ['product_image' => $filename]
                 );
             }

         }

         return redirect()
             ->route('manage.product.edit', $entry->id)
             ->with('message',($id>0 ? 'Updated' : 'Saved'))
             ->with('message_eng','success');
     }

     public function delete($id)
     {
         $product = Product::find($id);
         $product->categories()->detach();
         $product->delete();

         return redirect()
             ->route('management.product')
             ->with('message','Record successfully deleted')
             ->with('message_eng','success');
     }
}

<?php

namespace App\Http\Controllers\Management;

use App\Http\Controllers\Controller;
use App\Models\UserDetail;
use Auth;
use App\Models\User;
use Hash;

class UserController extends Controller
{
     public function login()
     {
         if (request()->isMethod('POST'))
         {
             $this->validate(request(), [
                 'email'=>'required|email',
                 'password'=> 'required'
             ]);

             $credentials = [
                 'email'=>request()->get('email'),
                 'password'=>request()->get('password'),
                 'admin_mi'=> 1,
                 'active_mi' => 1
             ];

             if (Auth::guard('admin')->attempt($credentials,request()->has('rememberme'))){
                 return redirect()->route('admin.home');
             }
             else
             {
                 return back()->withInput()->withErrors(['email'=>'Input incorrect!']);
             }
         }
         return view('admin.login');
     }

     public function logout()
     {
         Auth::guard('admin')->logout();
         request()->session()->flush();
         request()->session()->regenerate();
         return redirect()->route('admin.login');
     }

     public function index()
     {
        if (request()->filled('searched')) {
             request()->flash();
             $searched = request('searched');
             $list = User::where('name', 'like', "%$search%")
                 ->orWhere('email', 'like', "%$search%")
                 ->orderByDesc('create_date')
                 ->paginate(8)
                 ->appends('searched', $searched);
         } else {
             $list = User::orderByDesc('create_date')->paginate(8);
         }

         return view('admin.user.index', compact('list'));
     }

     public function form($id = 0)
     {
         $entry = new User;
         if ($id>0)
         {
             $entry = User::find($id);
         }
         return view('admin.user.form',compact('entry'));
     }

     public function save($id = 0)
     {
         $this->validate(request(),
         [
             'name' => 'required',
             'email' => 'required|email'
         ]);

         $data = request()->only('name','email');
         if (request()->filled('password'))
         {
             $data['password'] = Hash::make(request('password'));
         }

             $data['active_mi']= request()->has('active_mi') && request('active_mi')==1 ? 1: 0;
             $data['admin_mi']= request()->has('admin_mi') && request('admin_mi')==1 ? 1: 0;


         if ($id>0)
         {
             $entry= User::where('id',$id)->firstOrFail();
             $entry->update($data);
         }else
         {
             $entry = User::create($data);
         }

         UserDetail::updateOrCreate(
             ['user_id' => $entry->id],
             ['address'=>request('address'),
                 'phone'=>request('phone'),
                 'cellphone'=> request('mobilephone')
             ]);

         return redirect()
             ->route('admin.user.edit', $entry->id)
             ->with('message',($id>0 ? 'Updated' : 'Saved'))
             ->with('message_eng','success');
     }

     public function delete($id)
     {
         User::destroy($id);

         return redirect()
             ->route('admin.user')
             ->with('message','Record successfully deleted')
             ->with('message_eng','success');
     }
}

<?php

namespace App\Http\Controllers;

use App\Models\Order;
use Cart;
use Illuminate\Http\Request;

class OdemeController extends Controller
{
     public function index(){

         if (!auth()->check())
         {
             return redirect()->route('user.login')
                 ->with('message_eng','info')
                 ->with('message','You must login or register as a user for payment.');
         }
         else if (count(Cart::content())==0)
         {
             return redirect()->route('homepage')
                 ->with('message_eng','info')
                 ->with('message','You must add product to cart for checkout.');
         }

         $user_detail = auth()->user()->detail;


         return view('payment',compact('user_detail'));
     }

     public function checkout()
     {
         $order = request()->all();
         $order['basket_id'] =session('active_cart_id');
         $order['bank'] = "Guarantee";
         $order['number_instalments'] = 1;
         $order['status'] = "Your order has been received";
         $order['order_amount'] = Cart::subtotal();

         Order::create($order);
         Cart::destroy();
         session()->forget('active_basket_id');
         return redirect()->route('orders')
             ->with('message_eng','success')
             ->with('message','Your order was successful.');
     }
}

<?php

namespace App\Http\Controllers\Management;

use App\Models\Order;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

class HomeController extends Controller
{
     public function index()
     {
         $pending_order = Order::where('status','Your order has been received')->count();


         $payment_confirmed = Order::where('status','Payment confirmed')->count();
         $shipped = Order::where('status','Shipped')->count();
         $order_completed = Order::where('status','Order completed')->count();

         return view('admin.home',compact('pending_order',
             'payment_confirmed','shipped_shipped','order_completed'));
     }
}


<?php

namespace App\Http\Controllers\Management;

use App\Http\Controllers\Controller;
use App\Models\UserDetail;
use Auth;
use App\Models\User;
use Hash;

class UserController extends Controller
{
     public function login()
     {
         if (request()->isMethod('POST'))
         {
             $this->validate(request(), [
                 'email'=>'required|email',
                 'password'=> 'required'
             ]);

             $credentials = [
                 'email'=>request()->get('email'),
                 'password'=>request()->get('password'),
                 'admin_mi'=> 1,
                 'active_mi' => 1
             ];

             if (Auth::guard('admin')->attempt($credentials,request()->has('rememberme'))){
                 return redirect()->route('admin.home');
             }
             else
             {
                 return back()->withInput()->withErrors(['email'=>'Input incorrect!']);
             }
         }
         return view('admin.login');
     }

     public function logout()
     {
         Auth::guard('admin')->logout();
         request()->session()->flush();
         request()->session()->regenerate();
         return redirect()->route('admin.login');
     }

     public function index()
     {
        if (request()->filled('searched')) {
             request()->flash();
             $searched = request('searched');
             $list = User::where('name', 'like', "%$search%")
                 ->orWhere('email', 'like', "%$search%")
                 ->orderByDesc('create_date')
                 ->paginate(8)
                 ->appends('searched', $searched);
         } else {
             $list = User::orderByDesc('create_date')->paginate(8);
         }

         return view('admin.user.index', compact('list'));
     }

     public function form($id = 0)
     {
         $entry = new User;
         if ($id>0)
         {
             $entry = User::find($id);
         }
         return view('admin.user.form',compact('entry'));
     }

     public function save($id = 0)
     {
         $this->validate(request(),
         [
             'name' => 'required',
             'email' => 'required|email'
         ]);

         $data = request()->only('name','email');
         if (request()->filled('password'))
         {
             $data['password'] = Hash::make(request('password'));
         }

             $data['active_mi']= request()->has('active_mi') && request('active_mi')==1 ? 1: 0;
             $data['admin_mi']= request()->has('admin_mi') && request('admin_mi')==1 ? 1: 0;


         if ($id>0)
         {
             $entry= User::where('id',$id)->firstOrFail();
             $entry->update($data);
         }else
         {
             $entry = User::create($data);
         }

         UserDetail::updateOrCreate(
             ['user_id' => $entry->id],
             ['address'=>request('address'),
                 'phone'=>request('phone'),
                 'cellphone'=> request('mobilephone')
             ]);

         return redirect()
             ->route('admin.user.edit', $entry->id)
             ->with('message',($id>0 ? 'Updated' : 'Saved'))
             ->with('message_eng','success');
     }

     public function delete($id)
     {
         User::destroy($id);

         return redirect()
             ->route('admin.user')
             ->with('message','Record successfully deleted')
             ->with('message_eng','success');
     }
}

<?php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
     use SoftDeletes;
     protected $table = 'User';
     protected $fillable = ['name', 'email', 'password', 'activation_key','active_mi','admin_mi'];
     protected $hidden = ['password', 'activation_key',];
 

     public function getAuthPassword()
     {
         return $this->password;
     }

     public function detail()
     {
         return $this->hasOne('App\Models\UserDetail')->withDefault();
     }
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Product extends Model
{
     use SoftDeletes;
     protected $table = "product";
     protected $guarded=[];
     const CREATED_AT = 'create_date';
     const UPDATED_AT = 'update_date';
     const DELETED_AT = 'delete_date';
     //


     // Pulling the categories of a product
     // This is how we can shoot many-to-many related tables without creating a model file.
     public function categories(){
         return $this->belongsToMany('App\Models\Category','category_item');
     }

     public function detail(){
         return $this->hasOne('App\Models\ProductDetail')->withDefault();
     }
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Setting extends Model
{
     protected $table = 'setting';
     public $timestamps = false;
     protected $fillable = ['key','value'];
}

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Category extends Model
{
     use SoftDeletes;
     protected $table = "category";
/* protected $fillable=['category_name','slug'];*/
     protected $guarded=[];
     const CREATED_AT = 'create_date';
     const UPDATED_AT = 'update_date';
     const DELETED_AT = 'delete_date';


     public function products()
     {
         return $this->belongsToMany('App\Models\Product', 'category_product');
     }
     public function sub_categories()
     {
         return $this->hasMany('App\Models\Category', 'ust_id', 'id');
     }

     public function parent_category() {
         return $this->belongsTo('App\Models\Category', 'ust_id')->withDefault([
             'category_name' => 'Main Category'
         ]);
     }
}

<?php

namespace App\Http\Controllers\Management;

use App\Http\Controllers\Controller;
use App\Models\UserDetail;
use Auth;
use App\Models\User;
use Hash;

class UserController extends Controller
{
     public function login()
     {
         if (request()->isMethod('POST'))
         {
             $this->validate(request(), [
                 'email'=>'required|email',
                 'password'=> 'required'
             ]);

             $credentials = [
                 'email'=>request()->get('email'),
                 'password'=>request()->get('password'),
                 'admin_mi'=> 1,
                 'active_mi' => 1
             ];

             if (Auth::guard('admin')->attempt($credentials,request()->has('rememberme'))){
                 return redirect()->route('admin.home');
             }
             else
             {
                 return back()->withInput()->withErrors(['email'=>'Input incorrect!']);
             }
         }
         return view('admin.login');
     }

     public function logout()
     {
         Auth::guard('admin')->logout();
         request()->session()->flush();
         request()->session()->regenerate();
         return redirect()->route('admin.login');
     }

     public function index()
     {
        if (request()->filled('searched')) {
             request()->flash();
             $searched = request('searched');
             $list = User::where('name', 'like', "%$search%")
                 ->orWhere('email', 'like', "%$search%")
                 ->orderByDesc('create_date')
                 ->paginate(8)
                 ->appends('searched', $searched);
         } else {
             $list = User::orderByDesc('create_date')->paginate(8);
         }

         return view('admin.user.index', compact('list'));
     }

     public function form($id = 0)
     {
         $entry = new User;
         if ($id>0)
         {
             $entry = User::find($id);
         }
         return view('admin.user.form',compact('entry'));
     }

     public function save($id = 0)
     {
         $this->validate(request(),
         [
             'name' => 'required',
             'email' => 'required|email'
         ]);

         $data = request()->only('name','email');
         if (request()->filled('password'))
         {
             $data['password'] = Hash::make(request('password'));
         }

             $data['active_mi']= request()->has('active_mi') && request('active_mi')==1 ? 1: 0;
             $data['admin_mi']= request()->has('admin_mi') && request('admin_mi')==1 ? 1: 0;


         if ($id>0)
         {
             $entry= User::where('id',$id)->firstOrFail();
             $entry->update($data);
         }else
         {
             $entry = User::create($data);
         }

         UserDetail::updateOrCreate(
             ['user_id' => $entry->id],
             ['address'=>request('address'),
                 'phone'=>request('phone'),
                 'cellphone'=> request('mobilephone')
             ]);

         return redirect()
             ->route('admin.user.edit', $entry->id)
             ->with('message',($id>0 ? 'Updated' : 'Saved'))
             ->with('message_eng','success');
     }
